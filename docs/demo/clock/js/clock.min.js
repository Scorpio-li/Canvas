//2.获取Canvas上下文
var drawing = document.getElementById('drawing');
var ctx = drawing.getContext("2d");

//3.定义时钟对象
var clock = {
    innerRad :  200,
    outerRad : 220,
    center : [230,230],
    setClock : function(){
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(clock.center[0],clock.center[1],clock.innerRad,0,2*Math.PI,false);
        ctx.stroke();
        ctx.closePath();
        ctx.lineWidth = 18;
        ctx.beginPath();
        ctx.arc(clock.center[0],clock.center[1],clock.outerRad,0,2*Math.PI,false);
        ctx.stroke();
        ctx.closePath();
        ctx.save();
    },
    //在setNumber中使用了函数countNextPos，这个函数返回：以clock圆心为原点，参数pos坐标到原点的距离为半径画轴，顺时针旋转theta角度获得的坐标。
    setNumber : function(){
        ctx.font = "bold 28px Sans-Serif";
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        var pos = [];
        pos[0] = clock.center[0];
        pos[1] = clock.center[1]-clock.innerRad +16; 
        for(var i= 1;i < 13;i++){
            pos = countNexPos(pos,30);
            ctx.fillText(i,pos[0],pos[1]);
        }
    }
}

//4.定义表针对象：绘制时针、分针、秒针，均包含表针的长度、宽度、表针的坐标，当然还有在canvas上绘制表针。
function Hand(length,lineWidth){
    this.length = length;
    this.lineWidth = lineWidth;
}
Hand.prototype.setOrigin = function(){
    this.curPos = [];
    this.curPos[0] = clock.center[0];
    this.curPos[1] = clock.center[1] - this.length;
};
Hand.prototype.setPos = function(curPos){
    ctx.beginPath();
    ctx.moveTo(clock.center[0],clock.center[1]);
    ctx.lineWidth = this.lineWidth;
    ctx.lineTo(this.curPos[0],this.curPos[1]);
    ctx.stroke();
    ctx.closePath();
};
//时针分针秒针均为Hand的实例，有各自的长宽和坐标，拥有相同的设置原始坐标（setOrgin）和绘制表针（setPos，这个函数名字可能取的不够恰当）的方法。
//setOrigin方法的目的是设置表针均指向表盘的12数字时的坐标位置，这样便于针对时间得到旋转以后的坐标。

//5.得到表针旋转某个角度后的坐标
function countNexPos(curPos , theta){  //curPos:[x1,y1],theta:角度值
    var nexPos = [];
    nexPos[0] = (curPos[0]-clock.center[0])*Math.cos(theta / 180 * Math.PI) - (curPos[1] - clock.center[1]) * Math.sin(theta / 180 * Math.PI) +clock.center[0];
    nexPos[1] = (curPos[0]-clock.center[0])*Math.sin(theta / 180 * Math.PI) + (curPos[1] - clock.center[1]) * Math.cos(theta / 180 * Math.PI) +clock.center[1];
    return nexPos;
}

//6.获取当前时间并设置时针表针初始位置
function getNowTime(){
    var date = new Date();
    var time = {
        hour : date.getHours(),
        minu : date.getMinutes(),
        sec : date.getSeconds()
    }
    return time;
}

//根据当前时间估算每个表针的角度值并获取坐标。
function setTime(time,handSec,handMinu,handHour){
    var thetaSec = time.sec / 60 * 360;
    var thetaMinu = time.minu / 60 * 360 + thetaSec / 60;
    var thetaHour = time.hour / 12 * 360 + thetaMinu / 12;
    handSec.curPos = countNexPos(handSec.curPos,thetaSec);
    handMinu.curPos = countNexPos(handMinu.curPos,thetaMinu);
    handHour.curPos = countNexPos(handHour.curPos,thetaHour);
}

//在主程序中定时调用对应函数
window.onload = function(){
    clock.setClock();
    clock.setNumber();
    var handHour = new Hand(80,7);
    var handMinu = new Hand(150,4);
    var handSec = new Hand(170,1);
    handHour.setOrigin();//将初始坐标指向12时刻
    handMinu.setOrigin();
    handSec.setOrigin();
    var time = getNowTime();
    setTime(time,handSec,handMinu,handHour);
    handSec.setPos();
    handMinu.setPos();
    handHour.setPos();
    setInterval(function(){
        ctx.clearRect(0,0,drawing.width,drawing.height);
        clock.setClock();
        clock.setNumber();
        handSec.curPos = countNexPos(handSec.curPos,360/60);
        handSec.setPos();
        handMinu.curPos = countNexPos(handMinu.curPos,360/3600);
        handMinu.setPos();
        handHour.curPos = countNexPos(handHour.curPos,360/3600/12);
        handHour.setPos();
    },1000);
}
